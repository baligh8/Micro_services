services:
  mongodb:
    container_name: mongodb
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME:
      MONGO_INITDB_ROOT_PASSWORD:
      MONGO_INITDB_DATABASE: RentalLocation
    volumes:
      - mongodb:/data/mongodb
    ports:
      - "27017:27017"
    networks:
      - backend
    restart: unless-stopped

  mysql:
    container_name: mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: vehicle
    volumes:
      - mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - backend
    restart: unless-stopped

  server-discovery:
    container_name: server-discovery
    build:
      context: ./server-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - spring.profiles.active=dev
    networks:
      - backend

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper:/var/lib/zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka:/var/lib/kafka
    ports:
      - "9092:9092"
    networks:
      - backend
    depends_on:
      - zookeeper
    restart: unless-stopped



  config-server:
    container_name: config-server
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    depends_on:
      - server-discovery
    environment:
      - spring.profiles.active=dev
    networks:
      - backend

  gateway-server:
    container_name: gateway-server
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    depends_on:
      - server-discovery
    environment:
      - spring.profiles.active=dev
    networks:
      - backend

  vehicle:
    container_name: vehicle
    build:
      context: ./vehicle
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - server-discovery
      - mysql
      - kafka
    environment:
      - spring.profiles.active=dev
    networks:
      - backend

  test:
    container_name: rentalLocation
    build:
      context: ./rentalLocation
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - server-discovery
      - mongodb
      - kafka
    environment:
      - spring.profiles.active=dev
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mysql:
  mongodb:
  zookeeper:
  kafka:


